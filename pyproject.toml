[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-subagent-system"
version = "1.0.0"
description = "Claude Code Sub-Agent System for Product Development - Multi-agent orchestration with role boundaries"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Claude Sub-Agent System Team", email = "team@claude-subagents.dev"}
]
maintainers = [
    {name = "Claude Sub-Agent System Team", email = "team@claude-subagents.dev"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
]
keywords = [
    "ai", "agents", "multi-agent", "orchestration", "claude", "product-development",
    "context-engineering", "workflow", "automation", "pydantic-ai"
]
requires-python = ">=3.9"
dependencies = [
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pydantic-ai>=0.0.13",
    "typing-extensions>=4.7.0",
    "anthropic>=0.25.0",
    "openai>=1.40.0",
    "aiohttp>=3.8.0",
    "httpx>=0.24.0",
    "requests>=2.31.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "pygithub>=2.1.0",
    "jira>=3.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "asyncio>=3.4.3",
    "uvloop>=0.17.0",
    "structlog>=23.1.0",
    "rich>=13.4.0",
    "prometheus-client>=0.17.0",
    "pyyaml>=6.0.0",
    "toml>=0.10.2",
    "cryptography>=41.0.0",
    "jwt>=1.3.1",
    "click>=8.1.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.3.0",
]
external-tools = [
    "figma-python>=0.1.0",  # Figma API integration (if available)
]

[project.urls]
Homepage = "https://github.com/cemigo114/claude-subagent-system"
Documentation = "https://github.com/cemigo114/claude-subagent-system/blob/main/PRPs/"
Repository = "https://github.com/cemigo114/claude-subagent-system.git"
"Bug Tracker" = "https://github.com/cemigo114/claude-subagent-system/issues"

[project.scripts]
claude-subagents = "src.main:main"
subagent-validate = "validate_implementation:main"

[tool.setuptools.packages.find]
include = ["src*"]

[tool.setuptools.package-data]
src = ["py.typed", "*.pyi"]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
    "pydantic_ai.*",
    "github.*",
    "jira.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018", "S101", "SIM117"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slow, requires API access)",
    "external: marks tests that require external API access",
    "agent: marks tests that require agent orchestration",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]